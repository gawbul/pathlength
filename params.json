{"name":"Pathlength","tagline":"A program implementing a ray tracing model to determine the interactions of various parameters and their impacts on the pathlengths of POLs through a reflecting superposition compound eye.","body":"***\r\n# \r\n# **Superposition Eye Path-length Program**\r\n# \r\n***\r\n# \r\n\r\nA program implementing a ray tracing model to determine the interactions of various parameters and their impacts on path's of POLs through reflecting superposition compound eye.\r\n\r\nOriginal QBASIC version by Magnus L Johnson and Genevre Parker, 1995\r\n\r\nPython rewrite by Stephen P Moss, 2012-2013\r\n\r\nhttp://about.me/gawbul\r\n\r\ngawbul@gmail.com\r\n\r\n# \r\n# \r\n# Usage\r\n# \r\n# \r\n\r\nRun the program using:\r\n\r\n\tpython pathlen.py\r\n\r\n**N.B.: Implemented using Python 2.7**\r\n\r\n**Use the following to check your python version**:\r\n\r\n\t$ python -V\r\n\tPython 2.7.3\r\n\r\nIf you have a version less than 2.7, you can get the latest python version for your system from http://www.python.org/.\r\n\r\nThe default settings are located in the main function:\r\n\r\n\t# main handler subroutine\r\n\tdef main():\r\n\t\t# check what the program arguments are and assign appropriate variables\r\n\t\topts_array = handle_options(sys.argv[1:])\r\n\t\t(input_file, graphicsopt) = opts_array\r\n\t\r\n\t\t# check whether the user provide an input filename\r\n\t\tif input_file:\r\n\t\t\t# process file\r\n\t\t\tprocess_input_file(input_file, graphicsopt)\r\n\t\t\tsys.exit()\r\n\t\telse:\r\n\t\t\t# just continue with inline parameters below\r\n\t\t\tpass\r\n\t\r\n\t\t# show startup information\r\n\t\tstartup()\r\n\r\n\t\t# track how long it takes\r\n\t\tstart = time.time()\r\n\t\t\r\n\t\t# if not using an input file for the parameters you can set them manually as follows\r\n\t\t# setup nephrops_eye as new SuperpositionEye object - with relevant parameters passed\t\r\n\t\t# using Nephrops norvegicus flat lateral measurments\r\n\t\t# see README file or GitHub for information on parameters\r\n\t\tprint \"Setting up new superposition eye object...\"\r\n\t\tnephrops_eye = SuperpositionEye(\"nephrops\", 180, 25, 7800, 50, 3200, 1.34, 1.37, 18, 0) \r\n\r\n\t\t# run the model\r\n\t\tprint \"Running the ray tracing model (please wait)...\"\r\n\t\tnephrops_eye.run_model(graphicsopt)\r\n\t\r\n\t\t# summarise the data\r\n\t\tprint \"Outputting summary data...\"\r\n\t\tnephrops_eye.summarise_data()\r\n\t\r\n\t\t# how long did we take?\r\n\t\tend = time.time()\r\n\t\ttook = end - start\r\n\t\tprint \"\\nFinished in %s seconds.\\n\" % timedelta(seconds=took)\r\n\r\nTo setup a new eye object you need to do the following before executing the program:\r\n\r\n\teye_object = SuperpositionEye(\"genus\", 180, 25, 7800, 50, 3200, 1.34, 1.37, 18, 0) \r\n\r\nWhere the parameters equal:\r\n\r\n\t\"genus\"\t=\tA prefix for the output filenames e.g. organism genus name\r\n\t180 \t=\tRhabdom Length\r\n\t25 \t=\tRhabdom Width\r\n\t7800 \t=\tEye Diameter\r\n\t50 \t=\tFacet Width\r\n\t3200\t\t=\tAperture Diameter\r\n\t1.34\t=\tCytoplasm Refractive Index\r\n\t1.37\t=\tRhabdom Refractive Index\r\n\t18\t\t=\tBlur Circle Extent\r\n\t0\t\t=\tProximal Rhabdom Angle (used to create pointy-ended rhabdoms)\r\n\r\n**N.B.: The genus name is NOT case sensitive. It is always converted to lowercase to avoid file access issues.**\r\n\r\nThen you need to simply call the run_model method in order to execute the model.\r\n\r\n\teye_object.run_model()\r\n\r\nThis outputs two files (where genus is the name you give when setting up the object):\r\n\r\n\tgenus_output_one.txt\t=\tEach record is separated by 999 in the text and contains the length of the reflective tapetum and shielding pigment initially, followed by the path length values for each rhabdom the light passes through, starting at the axial rhabdom.\r\n\tgenus_output_two.txt\t=\t**Description needed**\r\n\r\nIn order to summarise the data one is required to call the summarise_data method:\r\n\r\n\teye_object.summarise_data()\r\n\t\r\nThis outputs three files (where genus is the name you give when setting up the object):\r\n\r\n\tgenus_summary_one.txt\t= **Description needed**\r\n\tgenus_summary_res.txt\t= Resolution output\r\n\tgenus_summary_sen.txt\t= Sensitivity output\r\n\r\n# \r\n# \r\n# Command line options\r\n# \r\n# \r\n\r\nThe program allows you to input certain command line options when executing the program:\r\n\r\n\te.g. python pathlen.py -v\r\n\r\nThe options that are available currently are:\r\n\r\n\tf\t=\tfile (also --file)\r\n\tg\t=\tgraphics (also --graphics)\r\n\tc\t=\tcitation (also --citation)\r\n\th\t=\thelp (also --help)\r\n\tv\t=\tversion (also --version)\r\n\r\nThese options have the following effects:\r\n\r\n\tfile\t\t=\tAllows the user to give a filename containing parameters in comma separated value format, with individual sets of parameters on separate lines. The program will parse each line of the file in turn, running the model for each set of parameters.\r\n\tgraphics\t=\tAllows the user to view graphical output. *** not yet implemented ***\r\n\tcitation\t=\tAllows the user to view the citation information.\r\n\thelp\t\t=\tAllows the user to view the usage information.\r\n\tversion\t\t=\tAllows the user to view the version of the program.\r\n\r\nBy providing an input file, you can implement a workflow, testing various different eye parameters and thus different hypotheses. The file should be in the following format and follows the same structure as using the object within the program, as shown above:\r\n\r\n\tnephropsfl,180,25,7800,50,3200,1.34,1.37,18,0\r\n\tnephropspl,180,25,7800,50,3200,1.34,1.37,18,12.5\r\n\tnephropsfa,180,25,6760,50,3060,1.34,1.37,10,0\r\n\tnephropspa,180,25,6760,50,3060,1.34,1.37,10,12.5","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}